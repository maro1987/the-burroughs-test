{"version":3,"sources":["app/hooks.ts","redux-modules/app/reducer.ts","components/DateSelector/DateSelector.tsx","utils/DateUtils.ts","components/SalaryTable/SalaryTable.styles.ts","components/SalaryTable/SalaryTable.tsx","utils/ArrayUtils.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","appReducer","createSlice","name","initialState","startDate","reducers","setStartTimestamp","state","action","payload","actions","DateSelector","dispatch","useDispatch","startTimestamp","app","useState","setStartDate","useEffect","Date","onChange","date","getTime","value","isWeekend","dayOfTheWeek","getDay","SalaryTableStyles","Wrapper","styled","header","DownloadButton","button","columns","selector","row","month","baseSalary","bonus","SalaryTable","tableData","setTableData","startDateTimestamp","dayOfTheMonth","getDate","lastDays","length","Array","from","keys","map","i","getFullYear","getMonth","baseSalaryPayDay","d","weekendDate","daysTooWeekend","setDate","getFridayBeforeWeekend","bonusPayDay","payDay","getWednesdayAfterWeekend","index","toDateString","data","a","toLocaleString","id","App","className","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAKaA,EAAkDC,I,yBCKlDC,EAAaC,YAAY,CACpCC,KAAM,MACNC,aANiC,CACjCC,UAAW,MAMXC,SAAU,CACRC,kBAAmB,SAACC,EAAOC,GACzBD,EAAMH,UAAYI,EAAOC,YAKhBH,EAAsBN,EAAWU,QAAjCJ,kBAEAN,IAAf,Q,OChBaW,EAAe,WAC1B,IAAMC,EFH4BC,cEI5BC,EAAiBhB,GAAe,SAACS,GAAD,OAAsBA,EAAMQ,IAAIX,aAEtE,EAAkCY,mBAAsB,MAAxD,mBAAOZ,EAAP,KAAkBa,EAAlB,KAEAC,qBAAU,WAEND,EADEH,EACW,IAAIK,KAAKL,GAET,QAEd,CAACA,IAMJ,OACE,gCACE,wGACA,cAAC,IAAD,CAAYM,SAPS,SAACC,GACxBT,EAASN,EAAkB,IAAIa,KAAKE,GAAMC,aAMAC,MAAOnB,Q,iBC3BxCoB,EAAY,SAACH,GACxB,IAAMI,EAAeJ,EAAKK,SAC1B,OAAwB,IAAjBD,GAAuC,IAAjBA,G,wBCkBlBE,EAAoB,CAAEC,QAlBnBC,UAAOC,OAAV,iEAkB+BC,eAbrBF,UAAOG,OAAV,qNCQdC,EAAkC,CACtC,CACE/B,KAAM,QACNgC,SAAU,SAACC,GAAD,OAASA,EAAIC,QAEzB,CACElC,KAAM,cACNgC,SAAU,SAACC,GAAD,OAASA,EAAIE,aAEzB,CACEnC,KAAM,6BACNgC,SAAU,SAACC,GAAD,OAASA,EAAIG,SAMdC,EAAc,WACzB,MAAkCvB,mBAAyB,IAA3D,mBAAOwB,EAAP,KAAkBC,EAAlB,KACMC,EAAqB5C,GAAe,SAACS,GAAD,OAAsBA,EAAMQ,IAAIX,aAqC1E,OAnCAc,qBAAU,WACR,GAAIwB,EAAoB,CACtB,IAAMtC,EAAY,IAAIe,KAAKuB,GACrBC,EAAgBvC,EAAUwC,UAC1BC,GCxCqBC,EDwCO,GCvC/BC,MAAMC,KAAKD,MAAMD,GAAQG,SDuCUC,KACpC,SAACC,GAAD,OAAO,IAAIhC,KAAKf,EAAUgD,cAAehD,EAAUiD,WAAaF,EAAI,EAAG,MAEnEG,EAAmBT,EAASK,KAAI,SAACK,GAAD,OAAQ/B,EAAU+B,GFtCxB,SAAClC,GACrC,IAAMI,EAAeJ,EAAKK,SACpB8B,EAAc,IAAIrC,KAAKE,GACvBoC,EAAkC,IAAjBhC,EAAqB,EAAI,EAGhD,OADA+B,EAAYE,QAAQF,EAAYZ,UAAYa,GACrCD,EEgC0DG,CAAuBJ,GAAKA,KAEnFK,EAAcf,EACjBK,KAAI,SAACK,GACJ,IAAMM,EAAS,IAAI1C,KAAKoC,GAAGG,QAjBZ,IAkBf,OAAO,IAAIvC,KAAK0C,MAEjBX,KAAI,SAACK,GAAD,OAAQ/B,EAAU+B,GFpCS,SAAClC,GACvC,IAAMI,EAAeJ,EAAKK,SACpB8B,EAAc,IAAIrC,KAAKE,GACvBoC,EAAkC,IAAjBhC,EAAqB,EAAI,EAGhD,OADA+B,EAAYE,QAAQF,EAAYZ,UAAYa,GACrCD,EE8B2BM,CAAyBP,GAAKA,KACzDL,KAAI,SAACK,EAAGQ,GACP,OAAIpB,EAAgBY,EAAEX,WAAuB,IAAVmB,EAC1B,KAEFR,EAAES,kBAGPC,EAAOpB,EAASK,KAAI,SAACgB,EAAGf,GAAJ,MAAW,CACnCf,MAAM,GAAD,OAAKkB,EAAiBH,GAAGgB,eAAe,UAAW,CAAE/B,MAAO,SAA5D,YAAyES,EAASM,GAAGC,eAC1Ff,WAAYiB,EAAiBH,GAAGa,eAChC1B,MAAOsB,EAAYT,GACnBiB,GAAIjB,MAGNV,EAAawB,QAEbxB,EAAa,ICnEa,IAACK,IDqE5B,CAACJ,IAGF,eAAC,EAAOd,QAAR,WACGY,EAAUM,OAAS,GAClB,cAAC,UAAD,CAASmB,KAAMzB,EAAf,SACE,cAAC,EAAOT,eAAR,6BAGJ,cAAC,IAAD,CAAWE,QAASA,EAASgC,KAAMzB,QE/D1B6B,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,IACA,cAAC,EAAD,QCPOC,EAAQC,YAAe,CAClCC,QAAS,CACP1D,IAAKf,KCOW0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8bd8e9ec.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface CounterState {\n  startDate: number | null;\n}\n\nconst initialState: CounterState = {\n  startDate: null,\n};\n\nexport const appReducer = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    setStartTimestamp: (state, action: PayloadAction<number>) => {\n      state.startDate = action.payload;\n    },\n  },\n});\n\nexport const { setStartTimestamp } = appReducer.actions;\n\nexport default appReducer.reducer;\n","import React, { useState, useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport DatePicker from 'react-date-picker';\nimport { RootState } from '../../app/store';\nimport { setStartTimestamp } from '../../redux-modules/app/reducer';\n\nexport const DateSelector = () => {\n  const dispatch = useAppDispatch();\n  const startTimestamp = useAppSelector((state: RootState) => state.app.startDate);\n\n  const [startDate, setStartDate] = useState<Date | null>(null);\n\n  useEffect(() => {\n    if (startTimestamp) {\n      setStartDate(new Date(startTimestamp));\n    } else {\n      setStartDate(null);\n    }\n  }, [startTimestamp]);\n\n  const handleDateChange = (date: Date) => {\n    dispatch(setStartTimestamp(new Date(date).getTime()));\n  };\n\n  return (\n    <div>\n      <h3>Select start date to display payment dates for the following 12 months</h3>\n      <DatePicker onChange={handleDateChange} value={startDate} />\n    </div>\n  );\n};\n","export const isWeekend = (date: Date) => {\n  const dayOfTheWeek = date.getDay();\n  return dayOfTheWeek === 0 || dayOfTheWeek === 6;\n};\n\nexport const getFridayBeforeWeekend = (date: Date) => {\n  const dayOfTheWeek = date.getDay();\n  const weekendDate = new Date(date);\n  const daysTooWeekend = dayOfTheWeek === 0 ? 2 : 1;\n\n  weekendDate.setDate(weekendDate.getDate() - daysTooWeekend);\n  return weekendDate;\n};\n\nexport const getWednesdayAfterWeekend = (date: Date) => {\n  const dayOfTheWeek = date.getDay();\n  const weekendDate = new Date(date);\n  const daysTooWeekend = dayOfTheWeek === 0 ? 3 : 4;\n\n  weekendDate.setDate(weekendDate.getDate() + daysTooWeekend);\n  return weekendDate;\n};\n","import styled from 'styled-components';\n\nconst Wrapper = styled.header`\n  width: 100%;\n  margin-top: 20px;\n`;\n\nconst DownloadButton = styled.button`\n  background-color: DodgerBlue;\n  border: none;\n  color: white;\n  padding: 12px 30px;\n  cursor: pointer;\n  font-size: 20px;\n\n  &:hover {\n    background-color: RoyalBlue;\n  }\n`;\n\nexport const SalaryTableStyles = { Wrapper, DownloadButton };\n","import React, { useState, useEffect } from 'react';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport { useAppSelector } from '../../app/hooks';\nimport { RootState } from '../../app/store';\nimport { getIntigersArray } from '../../utils/ArrayUtils';\nimport { getFridayBeforeWeekend, getWednesdayAfterWeekend, isWeekend } from '../../utils/DateUtils';\nimport { CSVLink } from 'react-csv';\nimport { SalaryTableStyles as Styled } from './SalaryTable.styles';\n\ntype DataRow = {\n  month: string;\n  baseSalary: string;\n  bonus: string;\n};\n\nconst columns: TableColumn<DataRow>[] = [\n  {\n    name: 'Month',\n    selector: (row) => row.month,\n  },\n  {\n    name: 'Base Salary',\n    selector: (row) => row.baseSalary,\n  },\n  {\n    name: 'Bonus (for previous month)',\n    selector: (row) => row.bonus,\n  },\n];\n\nconst BONUS_PAYOUT_DAY = 15;\n\nexport const SalaryTable = () => {\n  const [tableData, setTableData] = useState<Array<DataRow>>([]);\n  const startDateTimestamp = useAppSelector((state: RootState) => state.app.startDate);\n\n  useEffect(() => {\n    if (startDateTimestamp) {\n      const startDate = new Date(startDateTimestamp);\n      const dayOfTheMonth = startDate.getDate();\n      const lastDays = getIntigersArray(12).map(\n        (i) => new Date(startDate.getFullYear(), startDate.getMonth() + i + 1, 0),\n      );\n      const baseSalaryPayDay = lastDays.map((d) => (isWeekend(d) ? getFridayBeforeWeekend(d) : d));\n\n      const bonusPayDay = lastDays\n        .map((d) => {\n          const payDay = new Date(d).setDate(BONUS_PAYOUT_DAY);\n          return new Date(payDay);\n        })\n        .map((d) => (isWeekend(d) ? getWednesdayAfterWeekend(d) : d))\n        .map((d, index) => {\n          if (dayOfTheMonth > d.getDate() && index === 0) {\n            return 'NA';\n          }\n          return d.toDateString();\n        });\n\n      const data = lastDays.map((a, i) => ({\n        month: `${baseSalaryPayDay[i].toLocaleString('default', { month: 'long' })} ${lastDays[i].getFullYear()}`,\n        baseSalary: baseSalaryPayDay[i].toDateString(),\n        bonus: bonusPayDay[i],\n        id: i,\n      }));\n\n      setTableData(data);\n    } else {\n      setTableData([]);\n    }\n  }, [startDateTimestamp]);\n\n  return (\n    <Styled.Wrapper>\n      {tableData.length > 0 && (\n        <CSVLink data={tableData}>\n          <Styled.DownloadButton>Download CSV</Styled.DownloadButton>\n        </CSVLink>\n      )}\n      <DataTable columns={columns} data={tableData} />\n    </Styled.Wrapper>\n  );\n};\n","export const getIntigersArray = (length: number) => {\n  return Array.from(Array(length).keys());\n};\n","import React from 'react';\nimport './App.css';\nimport { DateSelector } from './components/DateSelector/DateSelector';\nimport { SalaryTable } from './components/SalaryTable/SalaryTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>The Burroughs Test</h1>\n      <DateSelector />\n      <SalaryTable />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport appReducer from '../redux-modules/app/reducer';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}